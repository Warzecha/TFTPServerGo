// Code generated by mockery v2.38.0. DO NOT EDIT.

package tftp

import mock "github.com/stretchr/testify/mock"

// MockFileStorage is an autogenerated mock type for the FileStorage type
type MockFileStorage struct {
	mock.Mock
}

type MockFileStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileStorage) EXPECT() *MockFileStorage_Expecter {
	return &MockFileStorage_Expecter{mock: &_m.Mock}
}

// AppendData provides a mock function with given fields: filename, blockNum, data
func (_m *MockFileStorage) AppendData(filename string, blockNum int, data []byte) {
	_m.Called(filename, blockNum, data)
}

// MockFileStorage_AppendData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendData'
type MockFileStorage_AppendData_Call struct {
	*mock.Call
}

// AppendData is a helper method to define mock.On call
//   - filename string
//   - blockNum int
//   - data []byte
func (_e *MockFileStorage_Expecter) AppendData(filename interface{}, blockNum interface{}, data interface{}) *MockFileStorage_AppendData_Call {
	return &MockFileStorage_AppendData_Call{Call: _e.mock.On("AppendData", filename, blockNum, data)}
}

func (_c *MockFileStorage_AppendData_Call) Run(run func(filename string, blockNum int, data []byte)) *MockFileStorage_AppendData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].([]byte))
	})
	return _c
}

func (_c *MockFileStorage_AppendData_Call) Return() *MockFileStorage_AppendData_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFileStorage_AppendData_Call) RunAndReturn(run func(string, int, []byte)) *MockFileStorage_AppendData_Call {
	_c.Call.Return(run)
	return _c
}

// CompleteUpload provides a mock function with given fields: filename
func (_m *MockFileStorage) CompleteUpload(filename string) {
	_m.Called(filename)
}

// MockFileStorage_CompleteUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteUpload'
type MockFileStorage_CompleteUpload_Call struct {
	*mock.Call
}

// CompleteUpload is a helper method to define mock.On call
//   - filename string
func (_e *MockFileStorage_Expecter) CompleteUpload(filename interface{}) *MockFileStorage_CompleteUpload_Call {
	return &MockFileStorage_CompleteUpload_Call{Call: _e.mock.On("CompleteUpload", filename)}
}

func (_c *MockFileStorage_CompleteUpload_Call) Run(run func(filename string)) *MockFileStorage_CompleteUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileStorage_CompleteUpload_Call) Return() *MockFileStorage_CompleteUpload_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFileStorage_CompleteUpload_Call) RunAndReturn(run func(string)) *MockFileStorage_CompleteUpload_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileMetadata provides a mock function with given fields: filename
func (_m *MockFileStorage) GetFileMetadata(filename string) (FileMetadata, bool) {
	ret := _m.Called(filename)

	if len(ret) == 0 {
		panic("no return value specified for GetFileMetadata")
	}

	var r0 FileMetadata
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (FileMetadata, bool)); ok {
		return rf(filename)
	}
	if rf, ok := ret.Get(0).(func(string) FileMetadata); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Get(0).(FileMetadata)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockFileStorage_GetFileMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileMetadata'
type MockFileStorage_GetFileMetadata_Call struct {
	*mock.Call
}

// GetFileMetadata is a helper method to define mock.On call
//   - filename string
func (_e *MockFileStorage_Expecter) GetFileMetadata(filename interface{}) *MockFileStorage_GetFileMetadata_Call {
	return &MockFileStorage_GetFileMetadata_Call{Call: _e.mock.On("GetFileMetadata", filename)}
}

func (_c *MockFileStorage_GetFileMetadata_Call) Run(run func(filename string)) *MockFileStorage_GetFileMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileStorage_GetFileMetadata_Call) Return(_a0 FileMetadata, _a1 bool) *MockFileStorage_GetFileMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileStorage_GetFileMetadata_Call) RunAndReturn(run func(string) (FileMetadata, bool)) *MockFileStorage_GetFileMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFileBytes provides a mock function with given fields: filename, start, end
func (_m *MockFileStorage) ReadFileBytes(filename string, start int, end int) []byte {
	ret := _m.Called(filename, start, end)

	if len(ret) == 0 {
		panic("no return value specified for ReadFileBytes")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, int, int) []byte); ok {
		r0 = rf(filename, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockFileStorage_ReadFileBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFileBytes'
type MockFileStorage_ReadFileBytes_Call struct {
	*mock.Call
}

// ReadFileBytes is a helper method to define mock.On call
//   - filename string
//   - start int
//   - end int
func (_e *MockFileStorage_Expecter) ReadFileBytes(filename interface{}, start interface{}, end interface{}) *MockFileStorage_ReadFileBytes_Call {
	return &MockFileStorage_ReadFileBytes_Call{Call: _e.mock.On("ReadFileBytes", filename, start, end)}
}

func (_c *MockFileStorage_ReadFileBytes_Call) Run(run func(filename string, start int, end int)) *MockFileStorage_ReadFileBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockFileStorage_ReadFileBytes_Call) Return(_a0 []byte) *MockFileStorage_ReadFileBytes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileStorage_ReadFileBytes_Call) RunAndReturn(run func(string, int, int) []byte) *MockFileStorage_ReadFileBytes_Call {
	_c.Call.Return(run)
	return _c
}

// StartNewUpload provides a mock function with given fields: filename
func (_m *MockFileStorage) StartNewUpload(filename string) FileMetadata {
	ret := _m.Called(filename)

	if len(ret) == 0 {
		panic("no return value specified for StartNewUpload")
	}

	var r0 FileMetadata
	if rf, ok := ret.Get(0).(func(string) FileMetadata); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Get(0).(FileMetadata)
	}

	return r0
}

// MockFileStorage_StartNewUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartNewUpload'
type MockFileStorage_StartNewUpload_Call struct {
	*mock.Call
}

// StartNewUpload is a helper method to define mock.On call
//   - filename string
func (_e *MockFileStorage_Expecter) StartNewUpload(filename interface{}) *MockFileStorage_StartNewUpload_Call {
	return &MockFileStorage_StartNewUpload_Call{Call: _e.mock.On("StartNewUpload", filename)}
}

func (_c *MockFileStorage_StartNewUpload_Call) Run(run func(filename string)) *MockFileStorage_StartNewUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileStorage_StartNewUpload_Call) Return(_a0 FileMetadata) *MockFileStorage_StartNewUpload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileStorage_StartNewUpload_Call) RunAndReturn(run func(string) FileMetadata) *MockFileStorage_StartNewUpload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileStorage creates a new instance of MockFileStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileStorage {
	mock := &MockFileStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
